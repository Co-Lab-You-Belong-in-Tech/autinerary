// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id @default(uuid())
  firstName    String     @map("first_name") @db.VarChar(100)
  lastName     String     @map("last_name") @db.VarChar(100)
  email        String     @unique @db.VarChar(255)
  password     String?
  relationship UserType
  role         UserRole   @default(USER)
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  profile      Profile?
  posts        Post[]
  channels     Channel[]
  comments     Comment[]
  Category     Category[]

  @@map("users")
}

model Channel {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  creator     User     @relation(fields: [creatorId], references: [email])
  creatorId   String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  posts       Post[]

  @@map("channels")
}

model Profile {
  id     String  @id @default(uuid())
  bio    String?
  userId String  @unique
  user   User    @relation(fields: [userId], references: [id], onDelete: NoAction)
}

model Post {
  id         String     @id @default(uuid())
  title      String     @db.VarChar(200)
  content    String
  author     User       @relation(fields: [authorId], references: [email])
  authorId   String
  channel    Channel?   @relation(fields: [channelId], references: [id])
  channelId  String?
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")
  comments   Comment[]
  categories Category[]

  @@map("posts")
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  creator     User     @relation(fields: [creatorId], references: [email])
  creatorId   String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  posts       Post[]

  @@map("categories")
}

model Comment {
  id              String    @id @default(uuid())
  content         String
  author          User      @relation(fields: [authorId], references: [email])
  authorId        String
  post            Post      @relation(fields: [postId], references: [id])
  postId          String
  children        Comment[] @relation("NestedComments")
  parentCommentId String?
  parentComment   Comment?  @relation("NestedComments", fields: [parentCommentId], references: [id])
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  @@map("comments")
}

enum UserType {
  Sibling
  Parent
  Adult
}

enum UserRole {
  USER
  ADMIN
}
